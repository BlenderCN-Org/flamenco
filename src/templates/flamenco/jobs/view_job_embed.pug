.flamenco-box.job.with-status(class="status-{{ job.status }}")
	p.item-name {{ job.name | hide_none }}
	| {% if job.description %}
	p.item-description {{ job.description | hide_none }}
	| {% endif %}

	.table.item-properties
		.table-body
			.table-row.properties-status.js-help(
				data-url="{{ url_for('flamenco.help', project_url=project.url) }}")
				.table-cell Status
				.table-cell(class="status-{{ job.status }}")
					| {{ job.status | undertitle }}
			| {% if job.status_reason %}
			.table-row
				.table-cell Reason
				.table-cell {{ job.status_reason }}
			| {% endif %}
			.table-row
				.table-cell Created by
				.table-cell
					='{{ user_name }} '
					span(title="{{ job._created }}") {{ job._created | pretty_date_time }}
			.table-row
				.table-cell Last Update
				.table-cell(title="{{ job._updated }}")
					| {{ job._updated | pretty_date_time }}
			.table-row
				.table-cell Job Type
				.table-cell
					| {{ job.job_type }}
			.table-row
				.table-cell Priority
				.table-cell(title="Higher number means higher priority")
					| {{ job.priority }}
					| {% if can_change_prio %}
					a(href="javascript:changeJobPriority('{{ job._id }}')") (change)
					| {% endif %}
			| {% if manager %}
			// manager can be None if the user doesn't have GET rights on it.
			.table-row
				.table-cell Manager
				.table-cell
					a(href="{{ url_for('flamenco.managers.view_embed', manager_id=manager._id) }}")
						| {{ manager.name }}
			| {% endif %}

	.table.item-properties.item-job-settings
		.table-body
			| {% for set_key, set_val in job_settings.items()  %}
			.table-row
				.table-cell
					| {{ set_key | undertitle }}
				.table-cell.job-setting(data-setting-key="{{ set_key }}")
					| {{ set_val }}
			| {% endfor %}

#item-action-panel
	.pull-right
		| {% if is_archived %}
		|     {% if write_access %}
		|         {% if archive_available %}
		a.btn.btn-outline-success(href="{{ url_for('flamenco.jobs.perproject.archive', project_url=project.url, job_id=job._id) }}")
			i.pi-download
			| Download job archive
		|         {% elif job.status == 'archiving' %}
		button.btn(disabled) Job is being archived
		|         {% else %}
		button.btn(disabled) Job archive not (yet) available
		|         {% endif %}
		|     {% endif %}
		| {% else %}
		| {%     if can_cancel_job %}
		button.btn.btn-danger(onclick="setJobStatus('{{ job._id }}', 'cancel-requested')")
			i.pi-cancel
			| Cancel Job
		| {%     endif %}
		| {%     if can_requeue_failed_tasks %}
		button.btn.btn-success.requeue-failed-tasks(onclick="requeueFailedTasks('{{ job._id }}')",
			title='Note that seeing this button does not mean there are actually any failed tasks. It is always shown when the job is active/queued.')
			i.pi-refresh
			| Re-queue failed tasks
		| {%     endif %}
		| {%     if can_requeue_job %}
		button.btn.btn-success.requeue-job(onclick="setJobStatus('{{ job._id }}', 'requeued')")
			i.pi-refresh
			| {% if job.status == 'paused' %}
			| Queue Job
			| {% else %}
			| Re-queue Job
			| {% endif %}
		| {%     endif %}
		| {%     if can_recreate_job %}
		button.btn.btn-success.requeue-job(
			onclick="recreateJob('{{ job._id }}')",
			title="Delete all tasks and logs, and create new tasks for this job")
			i.pi-fire
			| Re-create Job
		| {%     endif %}
		| {%     if can_archive_job %}
		button.btn.btn-success.archive-job(onclick="archiveJob('{{ job._id }}')")
			i.pi-file-archive
			| Archive Job
		| {%     endif %}
		| {%     if can_edit_rna_overrides %}
		a.btn.btn-success.edit-rna-overrides(href="{{ url_for('flamenco.jobs.perproject.edit_rna_overrides', project_url=project.url, job_id=job._id) }}")
			i.pi-blender
			| Edit RNA Overrides
			| {%     endif %}
		| {% endif %}
		.action-result-panel

#item-view-feed
	| {% if config.DEBUG %}
	.debug-info
		a.debug-info-toggle(role='button',
			data-toggle='collapse',
			href='#debug-content-job',
			aria-expanded='false',
			aria-controls='debug-content-job')
			i.pi-info
			| Debug Info
		#debug-content-job.collapse
			pre.
				{{ job.to_dict() | pprint }}
	| {% endif %}

	| {% if not is_archived %}
	#tasks
	comments-tree#comments-embed(
		parent-id="{{ job._id }}"
	)
	| {% endif %}

script(src="{{ url_for('static_flamenco', filename='assets/js/vendor/bowser-2.1.0.min.js')}}")
script.
	/* Load correct task page; was stored at the bottom of _task_list.pug */
	var sess_task_page = window.sessionStorage.getItem('flamenco-task-page');
	var tasks_url = "{{url_for('flamenco.tasks.perjob.list_for_job', job_id=job._id, project_url=project.url)}}";

	// Only load tasks if we're in the "job" context (e.g. the "rna-overrides" context should not show tasks.)
	if (ProjectUtils.context() == "job") {
		if (sess_task_page != null) {
			page_info = JSON.parse(sess_task_page);
			if (page_info.job_id == '{{ job._id }}') {
				tasks_url += '?page=' + page_info.task_page;
			}
		}
		loadTasks(tasks_url);
	}

	if (typeof openModalUrl == 'function')
		$('.js-help').openModalUrl('Help', "{{ url_for('flamenco.help', project_url=project.url) }}");

	$.fn.managerVariableReplace = function() {
		// Get OS name, defaulting to Linux.
		let osName = bowser.getParser(window.navigator.userAgent).getOSName();
		if (osName != 'Windows' && osName != 'macOS') osName = 'Linux'

		let mngrVariables = {{ manager.variables.to_dict() | tojson }};
		let mngrPathReplacement = {{ manager.path_replacement.to_dict() | tojson }};

		// Convert the per-OS variables into a flat OS-specific structure.
		var platformVars = {};
		let osname = osName.toLowerCase();
		for (varname in mngrVariables)
			platformVars[varname] = mngrVariables[varname][osname];
		for (varname in mngrPathReplacement)
			platformVars[varname] = mngrPathReplacement[varname][osname];

		// Some settings need some special treatment.
		// Mapping from setting key to function that transforms the setting value.
		let specials = {
			render_output: function(value) {
				/* Remove the trailing '####' and pop off the top directory.
				 * During rendering the top dir won't exist yet, but rather
				 * be an intermediate directory. */
				let withoutHashes = value.replace(/\/#*$/, '');
				let parts = withoutHashes.split(/[\\/]/);
				parts.pop();
				let sep = osName == 'Windows' ? '\\' : '/';
				return parts.join(sep);
			},
		}

		this.each(function(index, element) {
			var text = element.innerText;

			for (varname in platformVars) {
				text = text.replace('{' + varname + '}', platformVars[varname]);
			}

			let transformer = specials[element.dataset.settingKey];
			if (typeof transformer == 'function') {
				text = transformer(text);
			}

			var expandedFor = "";
			if (text != element.innerText) {
				expandedFor = " (variables expanded for " + osName + ")";
			}

			element.dataset.clipboardText = text;
			element.setAttribute('title', "Click to copy '" + text + "' to the clipboard" + expandedFor + ".");
		});

		return this;
	};

	$('.job-setting').managerVariableReplace();

	new Clipboard('.job-setting[data-clipboard-text]')
	.on('success', function(e) {
		statusBarSet('info', 'Copied setting to clipboard, localised for your platform', 'pi-check');
	});
