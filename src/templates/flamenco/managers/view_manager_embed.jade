.flamenco-box.manager
	form#item_form(onsubmit="return editManager()")
		| {% if can_edit %}
		.input-group
			input.item-name.input-transparent(
				name="name",
				type="text",
				placeholder="Manager's name",
				value="{{ manager.name | hide_none }}")
			button.copy-to-clipboard.btn.item-id(
				style="margin-left: auto",
				name="Copy to Clipboard",
				type="button",
				data-clipboard-text="{{ manager._id }}",
				title="Copy ID to clipboard")
				| ID
		.input-group
			textarea.item-description.input-transparent(
				name="description",
				type="text",
				rows=1,
				placeholder="Manager's description") {{ manager.description | hide_none }}

		.input-group
			button#item-save.btn.btn-default.btn-block(type='submit')
				i.pi-check
				| Save Manager
		| {% else %}
		p.item-name {{ manager.name | hide_none }}
		| {% if manager.description %}
		p.item-description {{ manager.description | hide_none }}
		| {% endif %}
		| {% endif %}

	h4 Properties
	.table.item-properties
		.table-body
			.table-row.properties-last-updated
				.table-cell Last Updated
				.table-cell(title='Unable to edit, set by Manager')
					| {{ manager._updated | hide_none | pretty_date_time }}
			.table-row.properties-url
				.table-cell URL
				.table-cell(title='Unable to edit, set by Manager')
					| {% if manager.url %}
					a(href="{{ manager.url }}") {{ manager.url }}
					| {% else %}
					| None yet, will be set by the Manager
					| {% endif %}

	| {% if manager.variables %}
	h4 Variables
	| {% for var_key, var_values in manager.variables.to_dict().items()  %}
	.table.item-properties
		.table-body(title='Unable to edit, set by Manager')
			| {% for v in var_values %}
			.table-row.properties-variables
				.table-cell.variable-name {% if loop.first %}{{ var_key }}{% endif %}
				.table-cell.variable-key {{ v }}
				.table-cell.variable-value {{ var_values[v] }}
			| {% endfor %}
	| {% endfor %}
	| {% endif %}

.flamenco-box.manager#manager-projects-list
	h4 Projects linked to this Manager

	| {% if linked_projects._items %}
	.table.item-properties
		.table-body
			| {% for project in linked_projects._items %}
			.table-row.properties-url
				.table-cell
					i.pi-blender-cloud
				.table-cell
					a(href="{{ url_for('flamenco.jobs.perproject.index', project_url=project.url) }}")
						| {{ project.name }}
				.table-cell
					a(href='javascript:clickUnlinkProject("{{ project._id }}")', title="Unlink project")
						i.pi-trash
			| {% endfor %}
	| {% else %}
	.projects-list-empty No projects linked yet.
	| {% endif %}

	| {% if can_edit %}
	#item-action-panel
		| {% if available_projects %}
		select#link_project_select
			| {% for project in available_projects %}
			option(value="{{ project._id }}") {{ project.name }}
			| {% endfor %}
		button.btn.btn-success(onclick="clickLinkProject()")
			i.pi-link
			| Link project
		| {% elif linked_projects %}
		button.btn.btn-default(disabled)
			| All available projects are linked already.
		| {% else %}
		button.btn.btn-default(disabled)
			| You have no projects set up for Flamenco.
		| {% endif %}
	| {% endif %}


// OWNERSHIP
| {% if can_edit %}
.flamenco-box.manager#manager-projects-list
	h4 Owners of this Manager

	#item-action-panel
		.row
			.col-md-6
				.sharing-users-search
					.form-group
						input#user-select.form-control(
							name='contacts',
							type='text',
							placeholder='Add owner by name')

				ul.sharing-users-list
					| {% for owner in owners %}
					li.sharing-users-item(
						user-id="{{ owner['_id'] }}",
						class="{% if current_user.objectid == owner['_id'] %}self{% endif %}")
						.sharing-users-avatar
							img(src="{{ owner['avatar'] }}")
						.sharing-users-details
							span.sharing-users-name
								| {{ owner['full_name'] }}
								| {% if current_user.objectid == owner['_id'] %}
								small (You)
								| {% else %}
								small (Co-owner)
								| {% endif %}
							span.sharing-users-extra {{ owner['username'] }}
						.sharing-users-action
							| {# Only allow deletion if we are: admin, project owners, or current_user in the team #}
							| {# TODO: Only allow user removal if owners > 1 #}

							| {% if current_user.objectid == owner['_id'] %}
							|     {% if can_abandon_manager %}
							button.user-remove(title="Abandon ownership of this Manager") Abandon
								i.pi-trash
							|     {% endif %}
							| {% else %}
							button.user-remove(title="Revoke ownership from this user")
								i.pi-trash
							| {% endif %}

					| {% endfor %}

			.col-md-6
				.sharing-users-info
					h4 What can owners do?
					p.
						Owners of a Manager can (un)link projects, appoint or remove other owners,
						and generally can use the Manager. Note that all owners are equal; there are
						no special rights or abilities for the person who created this Manager.
					p A Manager cannot be without owner.

| {% endif %}

.action-result-panel

| {% if can_edit %}
.flamenco-box.manager#manager-projects-list
	h4 Authentication Token

	.row
		.col-md-8
			p
				i.pi-lock
				a#show_auth_token(href='javascript:void(0);')
					// When changing the button text, also update _displayAuthToken().
					| click to show authentication token

		.col-md-4
			button.btn.btn-block#gen-auth-token(
				title="Generate New Token",
				name="Generate New Token",
				onclick="generateNewAuthToken()")
				// When changing the button text, also update generateNewAuthToken().
				| Generate new token

| {% endif %}

#item-view-feed
	| {% if config.DEBUG %}
	.debug-info
		a.debug-info-toggle(role='button',
			data-toggle='collapse',
			href='#debug-content-manager',
			aria-expanded='false',
			aria-controls='debug-content-manager')
			i.pi-info
			| Debug Info
		#debug-content-manager.collapse
			pre.
				{{ manager.to_dict() | pprint }}
	| {% endif %}

| {% block footer_scripts %}

| {% if can_edit %}
script.
	$(document).ready(function() {
		var APPLICATION_ID = '{{config.ALGOLIA_USER}}'
		var SEARCH_ONLY_API_KEY = '{{config.ALGOLIA_PUBLIC_KEY}}';
		var INDEX_NAME = '{{config.ALGOLIA_INDEX_USERS}}';
		var client = algoliasearch(APPLICATION_ID, SEARCH_ONLY_API_KEY);
		var index = client.initIndex(INDEX_NAME);

		$('#user-select').autocomplete({hint: false}, [
			{
				source: function (q, cb) {
					index.search(q, {hitsPerPage: 5}, function (error, content) {
						if (error) {
							cb([]);
							return;
						}
						cb(content.hits, content);
					});
				},
				displayKey: 'full_name',
				minLength: 2,
				limit: 10,
				templates: {
					suggestion: function (hit) {
						return hit._highlightResult.full_name.value + ' (' + hit._highlightResult.username.value + ')';
					}
				}
			}
		]).on('autocomplete:selected', function (event, hit, dataset) {

			var lis = document.getElementsByClassName('sharing-users-item');
			var has_match = false;

			for (var i = 0; i < lis.length; ++i) {

				// Check if the user already is in the list
				if ($(lis[i]).attr('user-id') == hit.objectID){

					$(lis[i]).addClass('active');
					setTimeout(function(){ $('.sharing-users-item').removeClass('active');}, 350);
					statusBarSet('info', 'User is already part of the project', 'pi-info');

					has_match = false;
					break;
				} else {
					has_match = true;
					continue;
				}
			};

			if (has_match){
				addUser('{{ manager["_id"] }}', hit.objectID);
			}

		});


		function addUser(managerId, userId){

			if (!userId || userId.length == 0) {
				statusBarSet('error', 'Please select a user from the list', 'pi-warning');
				return;
			}

			patchManager({
				op: 'change-ownership',
				action: 'share',
				manager_id: managerId,
				user: userId
			});
			//- .done(function (data) {
			//- 	console.log(data);

			//- 	var $ul = $("ul.sharing-users-list");
			//- 	var $li = $('<li>')
			//- 		.addClass('sharing-users-item added')
			//- 		.attr('user-id', data.id)
			//- 		.appendTo($ul);
			//- 	var $div = $('<div>')
			//- 		.addClass('sharing-users-avatar')
			//- 		.appendTo($li);
			//- 	$('<img>')
			//- 		.attr('src', data.avatar)
			//- 		.attr('alt', 'Avatar')
			//- 		.appendTo($div);

			//- 	$div = $('<div>')
			//- 		.addClass('sharing-users-details')
			//- 		.appendTo($li);
			//- 	$('<span>')
			//- 		.addClass('sharing-users-name')
			//- 		.text(data.full_name)
			//- 		.appendTo($div);
			//- 	$('<span>')
			//- 		.addClass('sharing-users-extra')
			//- 		.text(data.username)
			//- 		.appendTo($div);

			//- 	$div = $('<div>')
			//- 		.addClass('sharing-users-action')
			//- 		.appendTo($li);
			//- 	var $button = $('<button>')
			//- 		.addClass('user-remove')
			//- 		.attr('title', 'Remove this user from your project')
			//- 		.appendTo($div);
			//- 	$('<i>').addClass('pi-trash').appendTo($button);

			//- 	setTimeout(function(){ $('.sharing-users-item').removeClass('added');}, 350);
			//- 	statusBarSet('success', 'User added to this project!', 'pi-grin');
			//- })
			//- .fail(function (jsxhr){
			//- 	data = jsxhr.responseJSON;
			//- 	statusBarSet('error', 'Could not add user (' + data.message + ')', 'pi-warning');

			//- 	$('.action-result-panel').text(data.message);
			//- });
		};

	});

| {% endif %}
script.
	$(document).ready(function() {
		$('body').on('click', '.user-remove', function(e) {
			var userId = $(this).parent().parent().attr('user-id');
			removeUser('{{ manager["_id"] }}', userId);
		});

		function removeUser(managerId, userId){
			patchManager({
				op: 'change-ownership',
				action: 'unshare',
				manager_id: managerId,
				user: userId
			}).done(function() {
				$("ul.sharing-users-list").find("[user-id='" + userId + "']").remove();
				statusBarSet('success', 'User removed from this project', 'pi-trash');
			}).fail(function (data) {
				statusBarSet('error', 'Could not remove user (' + data._status + ')', 'pi-warning');
			});
		}
	});



script.
	var clipboard = null;
	function createClipboard() {
		if (clipboard != null) {
			clipboard.destroy();
		}

		clipboard = new Clipboard('.copy-to-clipboard');

		clipboard.on('success', function(e) {
			$(e.trigger).flashOnce();
			statusBarSet('info', 'Copied to clipboard', 'pi-check');
		});
	}
	createClipboard();

	function clickUnlinkProject(project_id) {
		var manager_id = '{{ manager._id }}';
		unlinkProject(manager_id, project_id)
		.done(function() {
			item_open(manager_id, 'manager', false);
		});
	}

	function clickLinkProject() {
		var manager_id = '{{ manager._id }}';
		var project_id = $('#link_project_select').val();
		linkProject(manager_id, project_id)
		.done(function() {
			item_open(manager_id, 'manager', false);
		});
	}

	function editManager() {
		var $form = $('#item_form');
		var new_name = $form.find('*[name="name"]').val();

		patchManager('{{ manager._id }}', {
			op: 'edit-from-web',
			name: new_name,
			description: $form.find('*[name="description"]').val(),
		})
		.done(function() {
			$('span.manager-name-{{ manager._id }}').text(new_name);
		})
		.fail(function(err) {
			var $p = xhrErrorResponseElement(err, 'Error editing Manager: ');
			$('.action-result-panel').html($p);
		})
		;

		return false;
	}

	var auth_token_link = $('#show_auth_token');
	function _displayAuthToken(json_data) {
		function _hideAuthToken() {
			auth_token_link
				.text('click to show authentication token')
				.removeClass('copy-to-clipboard')
				.removeAttr('title')
				.removeAttr('data-clipboard-text')
				.click(showAuthToken)
			;
			$('#click_token_text').remove();
		}

		auth_token_link
			.text(json_data.token)
			.addClass('copy-to-clipboard')
			.attr('title', 'Click to copy to clipboard')
			.attr('data-clipboard-text', json_data.token)
			.off('click')
		;
		$('#click_token_text').remove();
		$('<p>')
			.attr('id', 'click_token_text')
			.text(
				'Click the token to copy to your clipboard, ' +
				'then paste it into your flamenco-manager.yml file.')
			.addClass('hint')
			.insertAfter(auth_token_link.parent())
		;
		createClipboard();
		window.setTimeout(_hideAuthToken, 20000);
	}

	function showAuthToken() {
		$('.action-result-panel').html('');

		$.post(
			'{{ url_for("flamenco.managers.manager_auth_token", manager_id=manager._id) }}',
			{csrf: '{{ csrf }}'}
		)
		.done(_displayAuthToken)
		.fail(function(err) {
			var $p = xhrErrorResponseElement(err, 'Error fetching auth token: ');
			$('.action-result-panel').html($p);
		})
		;
	}
	auth_token_link.click(showAuthToken);

	function generateNewAuthToken() {
		$('.action-result-panel').html('');
		var $btn = $('#gen-auth-token');

		function restoreButtonText() {
			window.setTimeout(function() {
				$btn.text('Generate new token');
			}, 3000);
		}

		if (!confirm('Are you sure you want to generate a new authentication token? ' +
				'This will invalidate any previously existing token.')) {
			$btn.text('Cancelled');
			restoreButtonText();
			return;
		}

		$btn.attr('disabled', 'disabled').text('Generating');

		$.post(
			'{{ url_for("flamenco.managers.generate_auth_token", manager_id=manager._id) }}',
			{csrf: '{{ csrf }}'}
		)
		.done(function(data) {
			$btn.removeAttr('disabled').text('Token generated');
			_displayAuthToken(data);
			restoreButtonText();
		})
		.fail(function(err) {
			var $p = xhrErrorResponseElement(err, 'Error generating auth token: ');
			$('.action-result-panel').html($p);
			restoreButtonText();
		})
		;
	}


| {% endblock %}
